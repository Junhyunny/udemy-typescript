{
    "compilerOptions": {
        // 브라우저가 지원하는 문법에 맞춰 지정할 수 있다.
        // 변경되는 것에 따라 컴파일된 JavaScript 코드 모습이 다르다.
        "target": "es2016" /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */,

        // 컴파일에서 사용하는 라이브러리 정의
        // 빈 배열인 경우 디폴트 값이 없으므로 WebAPI를 사용하려고 할 때 에러가 발생한다.
        // ES5의 기본 값: dom, es5, scripthost
        // ES6의 기본 값: dom, dom.iterable, es6, scripthost
        // DOM - dom definition like window, document
        // es6 - ES2015
        // DOM.Interable -  DOM List 내부적으로 사용하는 Iterable을 정의하기 위한 타입
        // ScriptHost - APIs for Windows Script Hosting System
        "lib": ["DOM", "es6", "DOM.Iterable", "ScriptHost"],

        // 모듈을 다루는 문법 -  es6, commonjs 등
        "module": "commonjs" /* Specify what module code is generated. */,

        // true 인 경우 *.map 파일이 컴파일되어 생성된다.
        // 브라우저 개발자 도구에서 TypeScript가 보이게 만드는 설정이며, 손 쉬운 코드 디버깅이 가능하다.
        "sourceMap": false,

        // TypeScript가 컴파일한 코드를 저장할 폴더를 지정한다.
        "outDir": "./dist" /* Specify an output folder for all emitted files. */,

        // 컴파일 대상 소스 코드가 위치하는 루트 경로
        "rootDir": "./src" /* Specify the root folder within your source files. */,

        // 컴파일 된 파일에 주석 제거
        "removeComments": true /* Disable emitting comments. */,

        // 컴파일 에러가 나는 경우 JavaScript 파일을 만들지 않는 옵션
        // false 인 경우 컴파일 에러가 나더라도 JavaScript 파일을 만든다.
        // true 인 경우 컴파일 에러가 나면 JavaScript 파일을 만들지 않는다.
        "noEmitOnError": true /* Disable emitting files if any type checking errors are reported. */,

        /* Type Checking */
        // 모든 타입 옵션을 엄격하게 적용한다.
        "strict": true /* Enable all strict type-checking options. */,

        // "noImplicitAny": true /* Enable error reporting for expressions and declarations with an implied 'any' type. */,
        // "strictNullChecks": true /* When type checking, take into account 'null' and 'undefined'. */,
        // "strictFunctionTypes": true /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */,
        // "strictBindCallApply": true /* Check that the arguments for 'bind', 'call', and 'apply' methods match the original function. */,
        // "strictPropertyInitialization": true /* Check for class properties that are declared but not set in the constructor. */,
        // "noImplicitThis": true /* Enable error reporting when 'this' is given the type 'any'. */,
        // "useUnknownInCatchVariables": true /* Default catch clause variables as 'unknown' instead of 'any'. */,
        // "alwaysStrict": true /* Ensure 'use strict' is always emitted. */,

        "noUnusedLocals": true /* Enable error reporting when local variables aren't read. */,
        "noUnusedParameters": true /* Raise an error when a function parameter isn't read. */,
        "exactOptionalPropertyTypes": true /* Interpret optional property types as written, rather than adding 'undefined'. */,
        "noImplicitReturns": true /* Enable error reporting for codepaths that do not explicitly return in a function. */,

        "esModuleInterop": true /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */,

        "forceConsistentCasingInFileNames": true /* Ensure that casing is correct in imports. */,

        "skipLibCheck": true /* Skip type checking all .d.ts files. */
    },
    // 컴파일 대상에서 제거하는 옵션
    // node_modules는 default로 설정되어 있음
    "exclude": ["**/*.dev.ts", "node_modules"]

    // 컴파일 대상에 추가
    // 하나라도 추가되면 추가되지 않은 파일들은 컴파일 대상에서 제거
    // 패턴을 이용해 특정 폴더를 지정할 수 있다.
    // "include": ["app.ts", "analytics.ts"]

    // 특정 파일을 지정할 수 있다.
    // "files": ["app.ts"]
    // include와 files 모두 특정 파일들만 컴파일 대상으로 지정하는데 사용한다.
}
